# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio          = [ 1, 4, 3 ]
sort_by        = "natural"
sort_sensitive = true
sort_reverse   = false
sort_dir_first = true
linemode       = "size"
show_hidden    = true
show_symlink   = true

[preview]
tab_size        = 2
max_width       = 600
max_height      = 900
cache_dir       = ""
image_filter    = "nearest"
image_quality   = 50
sixel_fraction  = 15
ueberzug_scale  = 0.5
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
	{ run = 'hx "$@"', block = true, for = "unix" },
]
open = [
	{ run = 'xdg-open "$@"', desc = "Open", for = "linux" },
]
reveal = [
	{ run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
	{ run = 'ya pub extract --list "$@"', desc = "Extract here (ya)", for = "unix" },
	{ run = '7z x "$1"', desc = "Extract here (7z)", for = "unix" },
	{ run = 'unrar x "$1"', desc = "Extract here (unrar)", for = "unix" },
]
play = [
	{ run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
]
evince_open = [
	{ run = 'evince "$@"', orphan = true },
]
imv_open = [
	{ run = 'imv -n "$@" ./ -u linear', orphan = true },
]

[open]
rules = [
	{ name = "*/", use = [ "edit", "open", "reveal" ] },

	{ mime = "text/*",  use = [ "edit", "reveal" ] },
	{ mime = "video/*", use = [ "play", "reveal" ] },
	{ mime = "audio/*", use = [ "play", "reveal" ] },
	{ mime = "inode/x-empty", use = [ "edit", "reveal" ] },

	{ mime = "application/json", use = [ "edit", "reveal" ] },
	{ mime = "*/javascript",     use = [ "edit", "reveal" ] },

	{ mime = "application/zip", use = [ "extract", "reveal" ] },
  { mime = "application/gzip", use = [ "extract", "reveal" ] },
  { mime = "application/x-7z-compressed", use = [ "extract", "reveal" ] },
  { mime = "application/x-rar", use = [ "extract", "reveal" ] },
  { mime = "application/x-tar", use = [ "extract", "reveal" ] },
  { mime = "application/x-bzip2", use = [ "extract", "reveal" ] },
  { mime = "application/x-lzma", use = [ "extract", "reveal" ] },
  { mime = "application/x-lzip", use = [ "extract", "reveal" ] },
  { mime = "application/x-lzop", use = [ "extract", "reveal" ] },
  { mime = "application/x-xz", use = [ "extract", "reveal" ] },
  { mime = "application/x-compress", use = [ "extract", "reveal" ] },
  { mime = "application/zstd", use = [ "extract", "reveal" ] },

	# Evince view
	{ mime = "application/x-cb7",              use = [ "evince_open"  ] },
	{ mime = "application/x-cbr",              use = [ "evince_open"  ] },
	{ mime = "application/x-cbt",              use = [ "evince_open"  ] },
	{ mime = "application/x-cbz",              use = [ "evince_open"  ] },
	{ mime = "image/vnd.djvu",                 use = [ "evince_open"  ] },
	{ mime = "application/x-dvi",              use = [ "evince_open"  ] },
	{ mime = "application/oxps",               use = [ "evince_open"  ] },
	{ mime = "application/vnd.ms-xpsdocument", use = [ "evince_open"  ] },
	{ mime = "application/pdf",                use = [ "evince_open"  ] },
	{ mime = "application/postscript",         use = [ "evince_open"  ] },

	# imv view
	{ mime = "image/tiff",                     use = [ "imv_open"  ] },
	{ mime = "image/x-tiff",                   use = [ "imv_open"  ] },
	{ mime = "image/png",                      use = [ "imv_open"  ] },
	{ mime = "image/jpeg",                     use = [ "imv_open"  ] },
	{ mime = "image/svg+xml",                  use = [ "imv_open"  ] },
	{ mime = "image/heif",                     use = [ "imv_open"  ] },
	{ mime = "image/heif-sequence",            use = [ "imv_open"  ] },
	{ mime = "image/heic",                     use = [ "imv_open"  ] },
	{ mime = "image/heic-sequence",            use = [ "imv_open"  ] },
	{ mime = "image/jxl",                      use = [ "imv_open"  ] },

	{ mime = "*", use = [ "open", "reveal" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 25
bizarre_retry    = 5
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

[plugin]

fetchers = [
	# Mimetype
	{ id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]
preloaders = [
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick", prio = "low", multi = false },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/vnd.ms-opentype", run = "font" },
]
previewers = [
	{ name = "*/", run = "folder", sync = true },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "*/{xml,javascript,x-wine-extension-ini}", run = "code" },
	# JSON
	{ mime = "application/{json,x-ndjson}", run = "json" },
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Archive
	{ mime = "application/{,g}zip", run = "archive" },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar,iso9660-image}", run = "archive" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/vnd.ms-opentype", run = "font" },
	# Empty file
	{ mime = "inode/x-empty", run = "empty" },
	# Fallback
	{ name = "*", run = "file" },
]

[input]
cursor_blink = false

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title = ["Create:", "Create (dir):"]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

[confirm]
# trash
trash_title 	= "Trash {n} selected file{s}?"
trash_origin	= "center"
trash_offset	= [ 0, 0, 70, 20 ]

# delete
delete_title 	= "Permanently delete {n} selected file{s}?"
delete_origin	= "center"
delete_offset	= [ 0, 0, 70, 20 ]

# overwrite
overwrite_title   = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin  = "center"
overwrite_offset  = [ 0, 0, 50, 15 ]

# quit
quit_title   = "Quit?"
quit_content = "The following task is still running, are you sure you want to quit?"
quit_origin  = "center"
quit_offset  = [ 0, 0, 50, 15 ]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by      	 = "none"
sort_sensitive = false
sort_reverse 	 = false
sort_translit  = false

[log]
enabled = false
